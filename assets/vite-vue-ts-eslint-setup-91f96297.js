import{d as p,v as t,o as c,a as i,h as s,j as e,k as n,A as o}from"./app-9749d15e.js";const r="/assets/output-parserOptions-project-error-ceeaa787.png",d="/assets/output-parserOptions-project-without-error-74ff031b.png",u="/assets/tsconfig-include-a4dd9125.png",y="/assets/command-reload-window-955490ff.png",A="/assets/vscode-linting-result-f315bd6a.png",h="/assets/vue-file-error-73be3796.png",E="/assets/move-object-properties-99f2f466.gif",g="/assets/vscode-auto-fix-on-save-445e3f9d.gif",f="/assets/terminal-lint-09df797c.png",B="/assets/eslint-automatically-fixable-4b63f152.png",D={class:"markdown-body"},q=s("blockquote",null,[s("p",null,"以下使用 pnpm 作為套件管理工具，與 npm 或 yarn 的指令會有些許差異，請查看隨附的官方文件")],-1),_={id:"tl%3Bdr",tabindex:"-1"},k=n("TL;DR "),v={class:"header-anchor",href:"#tl%3Bdr"},C=s("p",null,[n("完整配置範例："),s("a",{href:"https://github.com/ngseke/vite-vue-ts-eslint-example"},"https://github.com/ngseke/vite-vue-ts-eslint-example")],-1),m={id:"%F0%9F%8F%97%EF%B8%8F-%E9%80%8F%E9%81%8E-vite-%E5%AE%98%E6%96%B9%E7%9A%84-preset-%E6%96%B0%E5%BB%BA%E5%B0%88%E6%A1%88",tabindex:"-1"},F=n("🏗️ 透過 Vite 官方的 Preset 新建專案 "),b={class:"header-anchor",href:"#%F0%9F%8F%97%EF%B8%8F-%E9%80%8F%E9%81%8E-vite-%E5%AE%98%E6%96%B9%E7%9A%84-preset-%E6%96%B0%E5%BB%BA%E5%B0%88%E6%A1%88"},j=o(`<blockquote><p><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">Scaffolding Your First Vite Project</a></p></blockquote><pre><code class="language-shell"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">pnpm create vite my-vue-app --template vue-ts</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">pnpm create vite my-vue-app --template vue-ts</span></span>
<span class="line"></span></code></pre></div></code></pre><p>移動到該目錄並安裝相依</p><pre><code class="language-shell"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#E0A569;">cd</span><span style="color:#DBD7CA;"> my-vue-app</span></span>
<span class="line"><span style="color:#DBD7CA;">pnpm i</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#B58451;">cd</span><span style="color:#393A34;"> my-vue-app</span></span>
<span class="line"><span style="color:#393A34;">pnpm i</span></span>
<span class="line"></span></code></pre></div></code></pre>`,4),x={id:"%F0%9F%8F%97%EF%B8%8F-%E5%88%9D%E5%A7%8B%E5%8C%96-eslint",tabindex:"-1"},w=n("🏗️ 初始化 ESLint "),S={class:"header-anchor",href:"#%F0%9F%8F%97%EF%B8%8F-%E5%88%9D%E5%A7%8B%E5%8C%96-eslint"},V=o(`<blockquote><p><a href="https://eslint.org/docs/latest/use/getting-started#quick-start">Getting Started with ESLint - Quick start</a></p></blockquote><pre><code class="language-shell"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">pnpm create @eslint/config</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">pnpm create @eslint/config</span></span>
<span class="line"></span></code></pre></div></code></pre><p>依序回答以下問題後，便會在根目錄新建 <code class="">.eslintrc.cjs</code>：</p><blockquote><p>✔ How would you like to use ESLint? · <strong>style</strong><br> ✔ What type of modules does your project use? · <strong>esm</strong><br> ✔ Which framework does your project use? · <strong>vue</strong><br> ✔ Does your project use TypeScript? · No / <strong>Yes</strong><br> ✔ Where does your code run? · <strong>browser</strong><br> ✔ How would you like to define a style for your project? · <strong>guide</strong><br> ✔ Which style guide do you want to follow? · <strong>standard-with-typescript</strong><br> ✔ What format do you want your config file to be in? · <strong>JavaScript</strong><br> ✔ Would you like to install them now? · No / <strong>Yes</strong><br> ✔ Which package manager do you want to use? · <strong>pnpm</strong></p></blockquote>`,4),O={id:"%F0%9F%98%B5-%E8%99%95%E7%90%86-vscode-output-%E7%9A%84-eslint-%E7%9A%84%E5%95%8F%E9%A1%8C",tabindex:"-1"},L=n("😵 處理 VSCode Output 的 ESLint 的問題 "),T={class:"header-anchor",href:"#%F0%9F%98%B5-%E8%99%95%E7%90%86-vscode-output-%E7%9A%84-eslint-%E7%9A%84%E5%95%8F%E9%A1%8C"},P=o('<p>雖然 ESLint 已初始化完成，但你會發現它尚未正常運作。例如試著在任意 <code class="">.ts</code> 或 <code class="">.vue</code> 檔隨便加多餘的空格，卻看不到預期的 error 或 warning 的波浪底線。</p><p>查看 Output 會看到以下錯誤訊息：</p><p><img src="'+r+`" alt=""></p><blockquote><p>An unexpected error occurred:<br> Error: Error while loading rule ‘@typescript-eslint/dot-notation’: You have used a rule which requires parserServices to be generated. You must therefore provide a value for the “parserOptions.project” property for @typescript-eslint/parser.</p></blockquote><p>根據錯誤訊息的描述，得知需要在 <code class="">.eslintrc.cjs</code> 補上 <code class="">parserOptions.project</code> 並指明 <code class="">parserOptions.parser</code>。</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#DBD7CA;">module.exports = {</span></span>
<span class="line"><span style="color:#DBD7CA;">    // ...</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;parserOptions&quot;: {</span></span>
<span class="line"><span style="color:#DBD7CA;">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">        &quot;sourceType&quot;: &quot;module&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+       project: [&#39;./tsconfig.json&#39;, &#39;./tsconfig.node.json&#39;],</span></span>
<span class="line"><span style="color:#85E89D;">+       parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    },</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#393A34;">module.exports = {</span></span>
<span class="line"><span style="color:#393A34;">    // ...</span></span>
<span class="line"><span style="color:#393A34;">    &quot;parserOptions&quot;: {</span></span>
<span class="line"><span style="color:#393A34;">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span></span>
<span class="line"><span style="color:#393A34;">        &quot;sourceType&quot;: &quot;module&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+       project: [&#39;./tsconfig.json&#39;, &#39;./tsconfig.node.json&#39;],</span></span>
<span class="line"><span style="color:#22863A;">+       parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span style="color:#393A34;">    },</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><p>再次查看 Output 錯誤訊息已消失</p><p><img src="`+d+'" alt=""></p><blockquote><p>Q: 為什麼是 <strong><code class="">parserOptions.parser</code></strong> 而非 <code class="">parser</code>？<br> A: 根據<a href="https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser">官方文件</a>說明，若寫在 <code class="">parser</code> 會把 <code class="">vue-eslint-parser</code> 覆蓋掉而無法正常地 lint <code class="">.vue</code> 檔。所以當有自訂的 parser 時（例如 <code class="">@typescript-eslint/parser</code>），必須把它移入 <code class="">parserOptions</code>。</p></blockquote>',9),W={id:"%F0%9F%98%B5-%E8%99%95%E7%90%86%E6%A0%B9%E7%9B%AE%E9%8C%84%E6%AA%94-tsconfig-include-%E7%9A%84%E5%95%8F%E9%A1%8C",tabindex:"-1"},N=n("😵 處理根目錄檔 TSConfig include 的問題 "),Y={class:"header-anchor",href:"#%F0%9F%98%B5-%E8%99%95%E7%90%86%E6%A0%B9%E7%9B%AE%E9%8C%84%E6%AA%94-tsconfig-include-%E7%9A%84%E5%95%8F%E9%A1%8C"},R=o('<p>雖然 Output 錯誤訊息已消失，但這時用 VSCode 開啟在根目錄的 <code class="">.ts</code> 和 <code class="">.cjs</code> 檔，例如 <code class="">vite.config.ts</code> 和<code class="">.eslintrc.cjs</code>，會發現它們在開頭都多了紅色的波浪底線：</p><p><img src="'+u+`" alt=""></p><blockquote><p>Parsing error: ESLint was configured to run on <code class="">&lt;tsconfigRootDir&gt;/.eslintrc.cjs</code> using <code class="">parserOptions.project</code>: /users/sean/my-vue-app/tsconfig.json<br> However, that TSConfig does not include this file. Either:</p><ul><li>Change ESLint’s list of included files to not include this file</li><li><strong>Change that TSConfig to include this file</strong></li><li>Create a new TSConfig that includes this file and include it in your parserOptions.project<br> See the typescript-eslint docs for more info: <a href="https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-filee">https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-filee</a></li></ul></blockquote><p>根據錯誤訊息得知，我們必須在 <code class="">tsconfig.node.json</code> 的 <code class="">includes</code> 中手動加入這些檔案：</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// tsconfig.node.json</span></span>
<span class="line"><span style="color:#DBD7CA;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">  // ...</span></span>
<span class="line"><span style="color:#DBD7CA;">  &quot;include&quot;: [</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;vite.config.ts&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+   &quot;.eslintrc.cjs&quot;</span></span>
<span class="line"><span style="color:#DBD7CA;">  ],</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// tsconfig.node.json</span></span>
<span class="line"><span style="color:#393A34;">{</span></span>
<span class="line"><span style="color:#393A34;">  // ...</span></span>
<span class="line"><span style="color:#393A34;">  &quot;include&quot;: [</span></span>
<span class="line"><span style="color:#393A34;">    &quot;vite.config.ts&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+   &quot;.eslintrc.cjs&quot;</span></span>
<span class="line"><span style="color:#393A34;">  ],</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><blockquote><p>日後若是在根目錄有新增那些在 <strong>Node 環境</strong>執行的，而不會被實際打包進專案的設定檔，例如 Tailwind CSS 的設定檔 <code class="">tailwind.config.ts</code>，也要記得手動加入進去。</p></blockquote><p>接著重新載入 VSCode 視窗</p><blockquote><p>叫出指令視窗 <code class="">⌘ + shift + P</code> → 輸入 <code class="">Developer: Reload Window</code></p></blockquote><p><img src="`+y+'" alt=""></p><p>打開 <code class="">.eslintrc.cjs</code> 可以看到 ESLint 終於正常運作了，它開始確實根據 <a href="https://github.com/standard/eslint-config-standard-with-typescript">eslint-config-standard-with-typescript</a> 的預設規則進行檢查，例如多餘的引號、字串應為單引號和縮排應為 2 格空格等。</p><p><img src="'+A+'" alt=""></p>',11),H={id:"%F0%9F%98%B5-%E8%99%95%E7%90%86-.vue-%E6%AA%94%E7%9A%84-non-standard-%E5%95%8F%E9%A1%8C",tabindex:"-1"},I=n("😵 處理 "),Q=s("code",{class:""},".vue",-1),G=n(" 檔的 non-standard 問題 "),J={class:"header-anchor",href:"#%F0%9F%98%B5-%E8%99%95%E7%90%86-.vue-%E6%AA%94%E7%9A%84-non-standard-%E5%95%8F%E9%A1%8C"},z=o('<p>打開任意 <code class="">.vue</code> 檔會發現它們也出現了錯誤訊息：</p><p><img src="'+h+`" alt=""></p><blockquote><p>Parsing error: ESLint was configured to run on <code class="">&lt;tsconfigRootDir&gt;/src/App.vue</code> using <code class="">parserOptions.project</code>: /users/sean/my-vue-app/tsconfig.json<br> The extension for the file (<code class="">.vue</code>) is non-standard. <strong>You should add <code class="">parserOptions.extraFileExtensions</code> to your config.</strong></p></blockquote><p>根據錯誤訊息的提示在 <code class="">.eslintrc.cjs</code> 加入 <code class="">parserOptions.extraFileExtensions</code> 後，再次重新載入 VSCode 視窗即可。</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#DBD7CA;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">    // ...</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;parserOptions&quot;: {</span></span>
<span class="line"><span style="color:#DBD7CA;">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">        &quot;sourceType&quot;: &quot;module&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">        project: [&#39;./tsconfig.json&#39;, &#39;./tsconfig.node.json&#39;],</span></span>
<span class="line"><span style="color:#DBD7CA;">        parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span style="color:#85E89D;">+       extraFileExtensions: [&#39;.vue&#39;]</span></span>
<span class="line"><span style="color:#DBD7CA;">    },</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#393A34;">{</span></span>
<span class="line"><span style="color:#393A34;">    // ...</span></span>
<span class="line"><span style="color:#393A34;">    &quot;parserOptions&quot;: {</span></span>
<span class="line"><span style="color:#393A34;">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span></span>
<span class="line"><span style="color:#393A34;">        &quot;sourceType&quot;: &quot;module&quot;,</span></span>
<span class="line"><span style="color:#393A34;">        project: [&#39;./tsconfig.json&#39;, &#39;./tsconfig.node.json&#39;],</span></span>
<span class="line"><span style="color:#393A34;">        parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span style="color:#22863A;">+       extraFileExtensions: [&#39;.vue&#39;]</span></span>
<span class="line"><span style="color:#393A34;">    },</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre>`,5),K={id:"%F0%9F%98%B5-%E8%B7%B3%E9%81%8E%E6%AA%A2%E6%9F%A5%E6%9F%90%E4%BA%9B%E6%AA%94%E6%A1%88",tabindex:"-1"},M=n("😵 跳過檢查某些檔案 "),U={class:"header-anchor",href:"#%F0%9F%98%B5-%E8%B7%B3%E9%81%8E%E6%AA%A2%E6%9F%A5%E6%9F%90%E4%BA%9B%E6%AA%94%E6%A1%88"},X={id:"dist%2F",tabindex:"-1"},Z=s("code",{class:""},"dist/",-1),$=n(),ss={class:"header-anchor",href:"#dist%2F"},ns=o(`<p>我們沒必要檢查建構好的已醜化和壓縮的檔案，因此可以在 <code class="">.eslintrc.cjs</code> 的 <code class="">ignorePatterns</code> 排除掉整個 <code class="">dist</code> 目錄：</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#DBD7CA;">module.exports = {</span></span>
<span class="line"><span style="color:#DBD7CA;">    // ...</span></span>
<span class="line"><span style="color:#85E89D;">+   ignorePatterns: [&#39;dist&#39;],</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// .eslintrc.cjs</span></span>
<span class="line"><span style="color:#393A34;">module.exports = {</span></span>
<span class="line"><span style="color:#393A34;">    // ...</span></span>
<span class="line"><span style="color:#22863A;">+   ignorePatterns: [&#39;dist&#39;],</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre>`,2),as={id:"vite-env.d.ts",tabindex:"-1"},es=s("code",{class:""},"vite-env.d.ts",-1),os=n(),ls={class:"header-anchor",href:"#vite-env.d.ts"},ps=o(`<p>按照預設規則，<code class="">vite-env.d.ts</code> 會違反 <code class="">@typescript-eslint/triple-slash-reference</code> 這條規則，建議可以在 <code class="">vite-env.d.ts</code> 的開頭加上註解 <code class="">// eslint-disable-next-line ...</code> 來跳過檢查：</p><pre><code class="language-typescript"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#758575;">// eslint-disable-next-line @typescript-eslint/triple-slash-reference</span></span>
<span class="line"><span style="color:#758575;">/// </span><span style="color:#858585;">&lt;</span><span style="color:#429988;">reference</span><span style="color:#758575;"> </span><span style="color:#E0A569;">types</span><span style="color:#CB7676;">=</span><span style="color:#C98A7D;">&quot;vite/client&quot;</span><span style="color:#758575;"> </span><span style="color:#858585;">/&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#A0ADA0;">// eslint-disable-next-line @typescript-eslint/triple-slash-reference</span></span>
<span class="line"><span style="color:#A0ADA0;">/// </span><span style="color:#8E8F8B;">&lt;</span><span style="color:#2F8A89;">reference</span><span style="color:#A0ADA0;"> </span><span style="color:#B58451;">types</span><span style="color:#AB5959;">=</span><span style="color:#B56959;">&quot;vite/client&quot;</span><span style="color:#A0ADA0;"> </span><span style="color:#8E8F8B;">/&gt;</span></span>
<span class="line"></span></code></pre></div></code></pre>`,2),ts={id:"%E2%9C%85-%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90",tabindex:"-1"},cs=n("✅ 大功告成 "),is={class:"header-anchor",href:"#%E2%9C%85-%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90"},rs=o(`<p>到此為止 ESLint 應該就可以順利的運作，接著你可以更進一步根據個人或團隊的風格和偏好調整 <code class="">rules</code>，開啟、關閉或調整某些規則。</p><p>例如我總是習慣微調 <a href="https://eslint.org/docs/latest/rules/comma-dangle">@typescript-eslint/comma-dangle</a>（行末逗號）的設定，讓最後一項依然保留逗號，這樣就可以更方便調整物件成員的順序：</p><pre><code class="language-typescript"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#E0A569;">module</span><span style="color:#858585;">.</span><span style="color:#E0A569;">exports</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#858585;">  </span><span style="color:#758575;">// ...</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#E0A569;">rules</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#858585;">    </span><span style="color:#758575;">// ...</span></span>
<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#C98A7D;">&#39;@typescript-eslint/comma-dangle&#39;</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">[</span><span style="color:#C98A7D;">&#39;error&#39;</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#E0A569;">arrays</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;always-multiline&#39;</span><span style="color:#858585;">,</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#E0A569;">objects</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;always-multiline&#39;</span><span style="color:#858585;">,</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#E0A569;">imports</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;always-multiline&#39;</span><span style="color:#858585;">,</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#E0A569;">exports</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;always-multiline&#39;</span><span style="color:#858585;">,</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#E0A569;">functions</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;only-multiline&#39;</span><span style="color:#858585;">,</span></span>
<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#858585;">}],</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#858585;">},</span></span>
<span class="line"><span style="color:#858585;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#B58451;">module</span><span style="color:#8E8F8B;">.</span><span style="color:#B58451;">exports</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#8E8F8B;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B58451;">rules</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#8E8F8B;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B56959;">&#39;@typescript-eslint/comma-dangle&#39;</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">[</span><span style="color:#B56959;">&#39;error&#39;</span><span style="color:#8E8F8B;">,</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B58451;">arrays</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;always-multiline&#39;</span><span style="color:#8E8F8B;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B58451;">objects</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;always-multiline&#39;</span><span style="color:#8E8F8B;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B58451;">imports</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;always-multiline&#39;</span><span style="color:#8E8F8B;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B58451;">exports</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;always-multiline&#39;</span><span style="color:#8E8F8B;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B58451;">functions</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;only-multiline&#39;</span><span style="color:#8E8F8B;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#8E8F8B;">}],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#8E8F8B;">},</span></span>
<span class="line"><span style="color:#8E8F8B;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><p><img src="`+E+'" alt=""></p>',4),ds={id:"%E2%9C%A8-%E8%A8%AD%E5%AE%9A-vscode-%E5%AD%98%E6%AA%94%E6%99%82%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88",tabindex:"-1"},us=n("✨ 設定 VSCode 存檔時自動排版 "),ys={class:"header-anchor",href:"#%E2%9C%A8-%E8%A8%AD%E5%AE%9A-vscode-%E5%AD%98%E6%AA%94%E6%99%82%E8%87%AA%E5%8B%95%E6%8E%92%E7%89%88"},As=o(`<p>你還可以讓開發體驗變的更舒適。</p><p>打開 <code class="">.vscode/settings.json</code>，若原本沒有這個檔案可以手動建立一個，加入以下設定：</p><pre><code class="language-typescript"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#858585;">  </span><span style="color:#758575;">// ...</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#C98A7D;">&quot;editor.codeActionsOnSave&quot;</span><span style="color:#DBD7CA;">: </span><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#C98A7D;">&quot;source.fixAll.eslint&quot;</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#858585;">},</span></span>
<span class="line"><span style="color:#858585;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#8E8F8B;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B56959;">&quot;editor.codeActionsOnSave&quot;</span><span style="color:#393A34;">: </span><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B56959;">&quot;source.fixAll.eslint&quot;</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#1C6B48;">true</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#8E8F8B;">},</span></span>
<span class="line"><span style="color:#8E8F8B;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><p>回到剛才滿江紅的 <code class="">.eslintrc.cjs</code> 測試看看，在手動存檔（<code class="">⌘ + S</code>）後就會自動排版和修正錯誤：</p><p><img src="`+g+'" alt=""></p>',5),hs={id:"%E2%9C%A8-%E9%80%8F%E9%81%8E-script-%E6%AA%A2%E6%9F%A5%E9%8C%AF%E8%AA%A4%E6%88%96%E6%98%AF%E8%87%AA%E5%8B%95%E4%BF%AE%E5%BE%A9%E9%8C%AF%E8%AA%A4",tabindex:"-1"},Es=n("✨ 透過 script 檢查錯誤或是自動修復錯誤 "),gs={class:"header-anchor",href:"#%E2%9C%A8-%E9%80%8F%E9%81%8E-script-%E6%AA%A2%E6%9F%A5%E9%8C%AF%E8%AA%A4%E6%88%96%E6%98%AF%E8%87%AA%E5%8B%95%E4%BF%AE%E5%BE%A9%E9%8C%AF%E8%AA%A4"},fs=s("p",null,[n("儘管在 VSCode 中的檢查和錯誤提示有助於得到即時反饋，但這些提示終究是 "),s("strong",null,"「消極的」"),n(" 。如果開發者使用別款 IDE，或只是單純對提示視若無睹，他們仍然可以輕易地違反這些規則，並提交不符合規則的程式碼。")],-1),Bs=s("p",null,"因此我們還需要透過 script 的方式來真正的執行規則檢查。",-1),Ds={id:"%E7%94%A8%E6%8C%87%E4%BB%A4%E6%AA%A2%E6%9F%A5%E9%8C%AF%E8%AA%A4",tabindex:"-1"},qs=n("用指令檢查錯誤 "),_s={class:"header-anchor",href:"#%E7%94%A8%E6%8C%87%E4%BB%A4%E6%AA%A2%E6%9F%A5%E9%8C%AF%E8%AA%A4"},ks=o(`<p>打開 <code class="">package.json</code>，在 <code class="">scripts</code> 中加入指令 <code class="">lint</code>，其中 <code class="">--ext</code> 的後面是想要檢查的副檔名：</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// package.json</span></span>
<span class="line"><span style="color:#DBD7CA;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">  // ...</span></span>
<span class="line"><span style="color:#DBD7CA;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+   &quot;lint&quot;: &quot;npx eslint . --ext .ts,.js,.cjs,.vue&quot;</span></span>
<span class="line"><span style="color:#DBD7CA;">  },</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// package.json</span></span>
<span class="line"><span style="color:#393A34;">{</span></span>
<span class="line"><span style="color:#393A34;">  // ...</span></span>
<span class="line"><span style="color:#393A34;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#393A34;">    &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#393A34;">    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#393A34;">    &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+   &quot;lint&quot;: &quot;npx eslint . --ext .ts,.js,.cjs,.vue&quot;</span></span>
<span class="line"><span style="color:#393A34;">  },</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><p>接著在 terminal 測試執行效果</p><pre><code class="language-shell"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">pnpm run lint</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">pnpm run lint</span></span>
<span class="line"></span></code></pre></div></code></pre><p>可以看到它列出了所有不符合設定規則的 error 和 warning，並且回傳 <code class="">exit code 1</code>。</p><p><img src="`+f+'" alt=""></p><p>這表示你就可以將這條指令整合進你的部署流程中，例如：</p><ol><li><strong>搭配 <a href="https://typicode.github.io/husky/">husky</a></strong>：使用 husky 可以在每次 commit 前自動執行 <code class="">pnpm run lint</code>。如果程式碼不符合規則就不給 commit，迫使開發者修復錯誤後再進行 commit，確保 code base 的風格始終維持一致</li><li><strong>CI/CD</strong>：你可以將 <code class="">pnpm run lint</code> 加入 CI/CD 流程，這樣在每次部署前都會自動進行代碼檢查。若檢查失敗，部署流程就會自動中斷，讓開發者不得不修正錯誤</li></ol>',8),vs={id:"%E7%94%A8%E6%8C%87%E4%BB%A4%E8%87%AA%E5%8B%95%E4%BF%AE%E5%BE%A9%E9%8C%AF%E8%AA%A4",tabindex:"-1"},Cs=n("用指令自動修復錯誤 "),ms={class:"header-anchor",href:"#%E7%94%A8%E6%8C%87%E4%BB%A4%E8%87%AA%E5%8B%95%E4%BF%AE%E5%BE%A9%E9%8C%AF%E8%AA%A4"},Fs=o(`<p>打開 <code class="">package.json</code>，在 <code class="">scripts</code> 中加入以下指令 <code class="">lint:fix</code>：</p><pre><code class="language-diff"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">// package.json</span></span>
<span class="line"><span style="color:#DBD7CA;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">  // ...</span></span>
<span class="line"><span style="color:#DBD7CA;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#DBD7CA;">    &quot;lint&quot;: &quot;npx eslint . --ext .ts,.js,.cjs,.vue&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+   &quot;lint:fix&quot;: &quot;npx eslint --fix . --ext .ts,.js,.cjs,.vue&quot;</span></span>
<span class="line"><span style="color:#DBD7CA;">  },</span></span>
<span class="line"><span style="color:#DBD7CA;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">// package.json</span></span>
<span class="line"><span style="color:#393A34;">{</span></span>
<span class="line"><span style="color:#393A34;">  // ...</span></span>
<span class="line"><span style="color:#393A34;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#393A34;">    &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#393A34;">    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#393A34;">    &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#393A34;">    &quot;lint&quot;: &quot;npx eslint . --ext .ts,.js,.cjs,.vue&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+   &quot;lint:fix&quot;: &quot;npx eslint --fix . --ext .ts,.js,.cjs,.vue&quot;</span></span>
<span class="line"><span style="color:#393A34;">  },</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span></code></pre></div></code></pre><p>接著在 terminal 測試執行效果</p><pre><code class="language-shell"><div class="shiki-container"><pre class="shiki shiki-dark" style="background-color:#121212;"><code class=""><span class="line"><span style="color:#DBD7CA;">pnpm run lint:fix</span></span>
<span class="line"></span></code></pre><pre class="shiki shiki-light" style="background-color:#ffffff;"><code class=""><span class="line"><span style="color:#393A34;">pnpm run lint:fix</span></span>
<span class="line"></span></code></pre></div></code></pre><p>順利的話「<strong>可自動修正</strong>（automatically fixable）」的那些規則都會被自動修正，也就是在 <a href="https://eslint.org/docs/latest/rules/">Rule 列表</a>有 🔧 符號的那些項目。</p><p><img src="`+B+'" alt=""></p>',6),bs={id:"eslint-%E5%8D%B3%E5%B0%87%E6%A3%84%E7%94%A8%E3%80%8C%E6%8E%92%E7%89%88%E3%80%8D%E8%A6%8F%E5%89%87",tabindex:"-1"},js=n("ESLint 即將棄用「排版」規則 "),xs={class:"header-anchor",href:"#eslint-%E5%8D%B3%E5%B0%87%E6%A3%84%E7%94%A8%E3%80%8C%E6%8E%92%E7%89%88%E3%80%8D%E8%A6%8F%E5%89%87"},ws=o('<p>ESLint 在 2023 年 10 月宣布將<a href="https://eslint.org/blog/2023/10/deprecating-formatting-rules/">棄用排版（Formatting）規則</a>，也就是棄用那些跟<strong>空格、縮排、換行、單/雙引號、分號等</strong>相關規則。而其餘分類下的規則不受影響，例如強制使用嚴格等於 <code class="">===</code>（<a href="https://eslint.org/docs/latest/rules/eqeqeq">eqeqeq</a>）、強制命名小駝峰（<a href="https://eslint.org/docs/latest/rules/camelcase">camelcase</a>）等。</p><p>未來若想繼續透過 ESLint 而非 Prettier 來排版程式碼，可以考慮搭配 <a href="https://eslint.style/">ESLint Stylistic</a> 來達成一樣的效果。這個 plugin 將會繼續接棒，維護這些被棄用的規則。</p>',2),Ss={id:"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99",tabindex:"-1"},Vs=n("參考資料 "),Os={class:"header-anchor",href:"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99"},Ls=s("p",null,[s("a",{href:"https://github.com/vitejs/vite/issues/13739#issuecomment-1641380518"},"https://github.com/vitejs/vite/issues/13739#issuecomment-1641380518"),s("br"),s("a",{href:"https://juejin.cn/post/7126043888573218823"},"https://juejin.cn/post/7126043888573218823")],-1),Ys={title:"建立 Vite + Vue + TypeScript + ESLint 專案可能會遇到的坑",date:"2023/10/03",tags:["Vite","Vue","TypeScript","ESLint"],original:"https://hackmd.io/@xq/vite-vue-ts-eslint-setup"},Rs="",Hs=p({__name:"vite-vue-ts-eslint-setup",setup(Ts,{expose:l}){return l({frontmatter:{title:"建立 Vite + Vue + TypeScript + ESLint 專案可能會遇到的坑",date:"2023/10/03",tags:["Vite","Vue","TypeScript","ESLint"],original:"https://hackmd.io/@xq/vite-vue-ts-eslint-setup"},excerpt:void 0}),(Ps,Ws)=>{const a=t("icon-link");return c(),i("div",D,[q,s("h2",_,[k,s("a",v,[e(a)])]),C,s("h2",m,[F,s("a",b,[e(a)])]),j,s("h2",x,[w,s("a",S,[e(a)])]),V,s("h2",O,[L,s("a",T,[e(a)])]),P,s("h2",W,[N,s("a",Y,[e(a)])]),R,s("h2",H,[I,Q,G,s("a",J,[e(a)])]),z,s("h2",K,[M,s("a",U,[e(a)])]),s("h3",X,[Z,$,s("a",ss,[e(a)])]),ns,s("h3",as,[es,os,s("a",ls,[e(a)])]),ps,s("h2",ts,[cs,s("a",is,[e(a)])]),rs,s("h2",ds,[us,s("a",ys,[e(a)])]),As,s("h2",hs,[Es,s("a",gs,[e(a)])]),fs,Bs,s("h3",Ds,[qs,s("a",_s,[e(a)])]),ks,s("h3",vs,[Cs,s("a",ms,[e(a)])]),Fs,s("h2",bs,[js,s("a",xs,[e(a)])]),ws,s("h2",Ss,[Vs,s("a",Os,[e(a)])]),Ls])}}});export{Hs as default,Rs as excerpt,Ys as frontmatter};
